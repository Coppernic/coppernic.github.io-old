"use strict";(self.webpackChunkcopper_docusaurus=self.webpackChunkcopper_docusaurus||[]).push([[6785],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=c(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||l[f]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4837:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],p={},s="HDK for C-One",c={unversionedId:"sdk/core/hdk_cone",id:"sdk/core/hdk_cone",isDocsHomePage:!1,title:"HDK for C-One",description:"Don't known what a C-One is ? The answer is here.",source:"@site/docs/sdk/core/hdk_cone.md",sourceDirName:"sdk/core",slug:"/sdk/core/hdk_cone",permalink:"/docs/sdk/core/hdk_cone",editUrl:"https://github.com/Coppernic/coppernic.github.io/docs/sdk/core/hdk_cone.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ethernet",permalink:"/docs/sdk/core/ethernet"},next:{title:"Key Mapping",permalink:"/docs/sdk/core/mapping"}},u=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Use Pins of C-One&#39;s expansion port",id:"use-pins-of-c-ones-expansion-port",children:[]},{value:"Observe input pin state",id:"observe-input-pin-state",children:[]}],l={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hdk-for-c-one"},"HDK for C-One"),(0,i.kt)("p",null,"Don't known what a C-One is ? The answer is ",(0,i.kt)("a",{parentName:"p",href:"https://www.coppernic.fr/prehome-mobility-fr/"},"here"),"."),(0,i.kt)("p",null,"HDK API is designed with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ReactiveX/RxJava"},"RxJava2"),"."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"For first generation of products, app ",(0,i.kt)("strong",{parentName:"p"},"CpcSystemServices")," at version 2.1.0 or above needs to be installed on device.\nFor ",(0,i.kt)("a",{parentName:"p",href:"/docs/start/quickstart"},"second generation")," ",(0,i.kt)("strong",{parentName:"p"},"CoreService")," app must be installed instead of ",(0,i.kt)("strong",{parentName:"p"},"CpcSystemServices"),".\nPlease contact ",(0,i.kt)("a",{parentName:"p",href:"mailto://support@coppernic.fr"},"Coppernic Support")," in case of difficulties."),(0,i.kt)("h2",{id:"use-pins-of-c-ones-expansion-port"},"Use Pins of C-One's expansion port"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Get a GpioPort instance:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private GpioPort gpioPort;\n\n@Override\npublic void onStart() {\n    super.onStart();\n    GpioPort.GpioManager.get()\n        .getGpioSingle(getContext())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(new Consumer<GpioPort>() {\n            @Override\n            public void accept(GpioPort g) throws Exception {\n                gpioPort = g;\n            }\n        });\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use it:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"RESULT res = gpioPort.setPin1(true)\n")),(0,i.kt)("h2",{id:"observe-input-pin-state"},"Observe input pin state"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"//Register an observer to the input state\nDisposable d = GpioPort.observeInputPin4(getContext(), 200, TimeUnit.MILLISECONDS)\n                // Be notified only when value is changing\n                .distinctUntilChanged()\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Consumer<Boolean>() {\n                    @Override\n                    public void accept(Boolean aBoolean) throws Exception {\n                        //Do something\n                    }\n                });\n//Dispose the observer when you are done\nd.dispose()\n")))}d.isMDXComponent=!0}}]);